#include <linux/blkdev.h>
#include <linux/fs.h>
#include <linux/slab.h>
#include <linux/dm-io.h>
#include <linux/module.h>
#include <linux/errno.h>

struct TreeNode {
    int data;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to read a sector from the block device
int read_sector(struct block_device *bdev, void *buffer, unsigned long sector, unsigned int count) {
    struct dm_io_client *io_client;
    struct dm_io_region io_region;
    struct dm_io_request io_req;
    int ret;

    io_client = dm_io_client_create();
    if (IS_ERR(io_client)) {
        pr_err("Failed to create I/O client\n");
        return PTR_ERR(io_client);
    }

    io_region.bdev = bdev;
    io_region.sector = sector;
    io_region.count = count;

    io_req.bi_op = REQ_OP_READ;
    io_req.client = io_client;
    io_req.mem.type = DM_IO_KMEM;
    io_req.mem.ptr.addr = buffer;

    ret = dm_io(&io_req, 1, &io_region, NULL);
    if (ret) {
        pr_err("I/O read failed\n");
        dm_io_client_destroy(io_client);
        return ret;
    }

    dm_io_client_destroy(io_client);
    return 0;
}

// Function to write data to a sector on the block device
int write_sector(struct block_device *bdev, void *buffer, unsigned long sector, unsigned int count) {
    struct dm_io_client *io_client;
    struct dm_io_region io_region;
    struct dm_io_request io_req;
    int ret;

    io_client = dm_io_client_create();
    if (IS_ERR(io_client)) {
        pr_err("Failed to create I/O client\n");
        return PTR_ERR(io_client);
    }

    io_region.bdev = bdev;
    io_region.sector = sector;
    io_region.count = count;

    io_req.bi_op = REQ_OP_WRITE;
    io_req.client = io_client;
    io_req.mem.type = DM_IO_KMEM;
    io_req.mem.ptr.addr = buffer;

    ret = dm_io(&io_req, 1, &io_region, NULL);
    if (ret) {
        pr_err("I/O write failed\n");
        dm_io_client_destroy(io_client);
        return ret;
    }

    dm_io_client_destroy(io_client);
    return 0;
}

// Function to traverse the binary tree and find the largest number
int find_largest_number(struct TreeNode *root) {
    if (root == NULL)
        return INT_MIN; // Return the smallest possible integer if the node is NULL

    int left_max = find_largest_number(root->left);  // Recursively find in left subtree
    int right_max = find_largest_number(root->right); // Recursively find in right subtree

    // Return the largest value among current node, left subtree, and right subtree
    return max(root->data, max(left_max, right_max));
}

// Function to recursively reconstruct the binary tree from raw data in the buffer
int reconstruct_tree(struct block_device *bdev, unsigned long *sector, struct TreeNode **node) {
    void *buffer;
    int ret;

    // Allocate buffer for reading a sector
    buffer = kmalloc(4096, GFP_KERNEL);
    if (!buffer) {
        pr_err("Failed to allocate buffer\n");
        return -ENOMEM;
    }

    // Read the current sector
    ret = read_sector(bdev, buffer, *sector, 1);
    if (ret) {
        kfree(buffer);
        return ret;
    }

    // Assume each node is stored as an integer in the buffer (simplified for the example)
    (*node) = kmalloc(sizeof(struct TreeNode), GFP_KERNEL);
    if (!*node) {
        kfree(buffer);
        pr_err("Failed to allocate TreeNode\n");
        return -ENOMEM;
    }

    (*node)->data = *((int *)buffer);  // The first 4 bytes of the buffer are the data of the node
    (*node)->left = NULL;
    (*node)->right = NULL;

    // Move to the next sector
    (*sector)++;

    // Recursively build the left and right subtrees
    if ((*sector) % 2 == 0) {  // Example condition for choosing left/right child for simplicity
        ret = reconstruct_tree(bdev, sector, &(*node)->left); // Recurse for left child
        if (ret) {
            kfree(buffer);
            return ret;
        }
    }

    if ((*sector) % 3 == 0) {
        ret = reconstruct_tree(bdev, sector, &(*node)->right); // Recurse for right child
        if (ret) {
            kfree(buffer);
            return ret;
        }
    }

    // Optionally write the current node's data to the block device
    ret = write_sector(bdev, &( (*node)->data), *sector - 1, 1);  // Write back node's data to previous sector
    if (ret) {
        pr_err("Failed to write node data to block device\n");
    }

    kfree(buffer);
    return 0;
}

static int __init hello_init(void) {
    struct block_device *bdev;
    struct TreeNode *root = NULL;
    int largest_number;
    int ret;
    unsigned long sector = 0;  // Start from the first sector

    // Open the block device for reading and writing
    bdev = blkdev_get_by_path("/dev/sdb", FMODE_READ | FMODE_WRITE, NULL);
    if (IS_ERR(bdev)) {
        pr_err("Failed to open block device\n");
        return PTR_ERR(bdev);
    }

    // Reconstruct the tree from the block device
    ret = reconstruct_tree(bdev, &sector, &root);
    if (ret) {
        pr_err("Failed to reconstruct tree\n");
        blkdev_put(bdev, FMODE_READ | FMODE_WRITE);
        return ret;
    }

    // Find the largest number in the tree
    largest_number = find_largest_number(root);
    pr_info("Largest number in the tree: %d\n", largest_number);

    // Clean up
    kfree(root);  // Free the allocated tree
    blkdev_put(bdev, FMODE_READ | FMODE_WRITE);
    return 0;
}

static void __exit hello_exit(void) {
    pr_info("Kernel module exited\n");
}
MODULE_INFO(intree,"Y");
module_init(hello_init);
module_exit(hello_exit);
MODULE_LICENSE("GPL");