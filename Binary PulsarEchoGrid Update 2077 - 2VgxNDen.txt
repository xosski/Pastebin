github.com/xosski/Binary-Pulsar/tree/main
🌌 Binary Pulsar

A covert payload assembler using entropy from packet loss patterns and volatile in-browser compilation. Defensive-first, offensive-possible.

✨ Overview

Binary Pulsar is a red-team simulation and defensive research toolkit that explores advanced methods of covert code delivery, reassembly, and execution in volatile memory contexts. Using IPv4/IPv6 header fields and entropy derived from packet loss patterns, Binary Pulsar demonstrates the feasibility of reassembling Base64-encoded payload fragments entirely in memory — without touching disk.

💡 Core Features

🔬 Entropy-Based Packet Assembly

Utilizes packet sequence gaps and timing irregularities to derive entropy used for payload ordering and validation.

🧠 Memory-Only Execution

Payloads are reconstructed and executed directly in browser memory using Function(atob(...)), minimizing digital footprint.

🛰️ IP-Tracked Packet Grouping

Packets are grouped by source IP, allowing for decentralized delivery and multichannel reassembly strategies.

📷 EchoGrid Module Integration

EchoGrid & EchoGridExifModules allow for passive payload scanning from DOM images

ghost_* filename fragments, altText JSON, and EXIF metadata are supported

EXIF extraction occurs client-side using DataView parsing — no libraries needed

XOR+Base64 fragment decoding via GhostShellDecoder

🔒 Defensive Mode (Optional)

Simulates detection techniques like stack diffing and packet inspection to help blue teams prepare countermeasures.

✅ Consent & Ethical Toggle

Includes a "I own this environment" prompt prior to execution of any reassembled payload.

🛡️ Peer Consensus Validation

Binary Pulsar encourages ethical red team usage through a novel Peer Validation Framework:

User-Triggered Consent Gate: No payload executes without explicit consent checkbox confirming environment ownership.

Signal-Based Flagging: Payloads can be tagged by community peers for analysis and classification.

Weighted Incentive Structure (Future Concept): DAO-backed scores for flagging high-risk content (e.g., CSAM, arms trade data).

🔥 Why This Matters

Binary Pulsar isn’t just proof-of-concept — it’s a warning and a blueprint. The next generation of network exploitation won’t arrive in .zip files. It’ll ride inside the gaps. And our tools need to be ready before those ghosts arrive.

This tool showcases how:

Child exploitation content can be detected and invalidated at the packet level.

Illicit payloads (e.g., illegal weapons market code) can be flagged or filtered before reassembly.

Defensive researchers can analyze threat signatures before full execution occurs.

🚀 Getting Started

Install dependencies and run the toolkit in a secure test environment:

git clone https://github.com/yourhandle/binary-pulsar.git
cd binary-pulsar
npm install
npm run dev

Launch the GhostShell module via the UI to begin packet simulation or manually inject fragments via:

injectGhostFragment(index, base64Payload);
injectPacketData("seq|b64data|IPv4|sourceIP");

Use the EchoGrid UI component to visually detect and reassemble payloads hidden in DOM images:

<EchoGridModule />

Or:

<EchoGridExifModule />

🧬 Future Vision

🛸 Zero-Knowledge Fragment Signing

📡 Tor / I2P Transmission Layer

⚛️ Quantum-Noise Seeded Entropy

🕊️ Global Moderation Ledger for Digital War Crimes Prevention

📜 License

MIT License — Fork freely, test ethically, and never forget:

The pen is still in your hand.And the beam doesn’t stop just because the pulsar is silent.